# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GbAzQgTqJme06CMxu30OEIRUjut_pNw
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import altair as alt

st.set_page_config(page_title="Property 20-Year Projection", layout="wide")
st.title("Property 20-Year Projection")
st.caption("Lightweight calculator for income, costs, cashflow, tax effect, and property value over 20 years.")

with st.sidebar:
    st.header("Property & Finance")
    property_value = st.number_input("Current property value ($)", min_value=0, value=600_000, step=10_000)
    capital_growth_pct = st.number_input("Capital growth % (per year)", min_value=0.0, value=4.0, step=0.1)
    lvr_pct = st.slider("Loan-to-value (LVR %)", 0, 100, 80)
    interest_rate_pct = st.number_input("Interest rate %", min_value=0.0, value=6.0, step=0.1)
    loan_term_years = st.number_input("Loan term (years)", min_value=1, value=30, step=1)
    repayment_type = st.selectbox("Repayment type", ["Principal & Interest", "Interest-only"], index=0)
    term_years = st.slider("Projection years", 1, 30, 20)

    st.header("Rent & Fees")
    weekly_rent = st.number_input("Weekly rent ($)", min_value=0, value=600, step=10)
    rent_growth_pct = st.number_input("Rent growth % (per year)", min_value=0.0, value=3.0, step=0.1)
    pm_fee_pct = st.number_input("Property management % of rent", min_value=0.0, value=7.0, step=0.1)

    st.header("Annual Costs (Year 1)")
    insurance = st.number_input("Insurance ($/yr)", min_value=0, value=1200, step=100)
    water = st.number_input("Water rates ($/yr)", min_value=0, value=1000, step=100)
    council = st.number_input("Council rates ($/yr)", min_value=0, value=1800, step=100)
    misc = st.number_input("Miscellaneous ($/yr)", min_value=0, value=800, step=50)
    cost_growth_pct = st.number_input("Cost inflation % (per year)", min_value=0.0, value=3.0, step=0.1)

    st.header("Tax & Depreciation")
    tax_profile = st.selectbox(
        "Tax profile",
        ["Individual (enter tax rate)", "SMSF (Accumulation 15%)", "SMSF (Pension 0%)"],
        index=0,
    )
    if tax_profile == "Individual (enter tax rate)":
        tax_rate_pct = st.number_input("Marginal tax rate %", min_value=0.0, value=37.0, step=0.5)
    elif tax_profile == "SMSF (Accumulation 15%)":
        tax_rate_pct = 15.0
    else:
        tax_rate_pct = 0.0

    dep_mode = st.selectbox("Depreciation input", ["Enter annual amount", "Estimate from build value"], index=0)
    if dep_mode == "Enter annual amount":
        dep_annual = st.number_input("Depreciation ($/yr)", min_value=0, value=5000, step=500)
        build_value = None
        dep_rate_pct = None
    else:
        build_value = st.number_input("Build value ($) for capital works", min_value=0, value=350_000, step=10_000)
        dep_rate_pct = st.number_input("Depreciation rate % (e.g., 2.5%)", min_value=0.0, value=2.5, step=0.1)
        dep_annual = None

# ---- Derived values ----
lvr = lvr_pct / 100
loan_amount = property_value * lvr

interest_rate = interest_rate_pct / 100
monthly_rate = interest_rate / 12
n_months = int(loan_term_years * 12)

capital_growth = capital_growth_pct / 100
rent_growth = rent_growth_pct / 100
pm_fee = pm_fee_pct / 100
cost_growth = cost_growth_pct / 100

tax_rate = (tax_rate_pct or 0.0) / 100
if dep_annual is not None:
    annual_depreciation_input = float(dep_annual)
else:
    annual_depreciation_input = (build_value or 0.0) * (dep_rate_pct or 0.0) / 100.0  # simple flat schedule

# Monthly repayment for P&I; IO handled separately
if repayment_type == "Principal & Interest":
    if monthly_rate == 0:
        monthly_payment = loan_amount / max(n_months, 1)
    else:
        monthly_payment = loan_amount * (monthly_rate * (1 + monthly_rate) ** n_months) / ((1 + monthly_rate) ** n_months - 1)
else:
    monthly_payment = loan_amount * monthly_rate  # interest-only

# ---- Projections ----
rows = []
value = property_value
annual_rent = weekly_rent * 52
annual_insurance = insurance
annual_water = water
annual_council = council
annual_misc = misc

# Amortization state
balance = loan_amount
remaining_months = n_months  # copy so we don't lose original

for year in range(0, term_years + 1):
    gross_income = annual_rent
    pm_cost = gross_income * pm_fee

    # Debt service for this year (sum 12 months)
    annual_interest_paid = 0.0
    annual_principal_paid = 0.0

    for _ in range(12):
        if balance <= 0:
            break
        if repayment_type == "Interest-only":
            interest_m = balance * monthly_rate
            principal_m = 0.0
        else:
            if remaining_months <= 0:
                interest_m = 0.0
                principal_m = 0.0
            else:
                interest_m = balance * monthly_rate
                principal_m = monthly_payment - interest_m
                if principal_m > balance:
                    principal_m = balance
                remaining_months -= 1
        annual_interest_paid += interest_m
        annual_principal_paid += principal_m
        balance -= principal_m

    debt_service = annual_interest_paid + annual_principal_paid

    # Running costs + simple flat depreciation
    other_costs = annual_insurance + annual_water + annual_council + annual_misc
    total_costs = pm_cost + debt_service + other_costs
    net_cashflow = gross_income - total_costs

    annual_depreciation = annual_depreciation_input  # constant each year (kept simple)

    # Tax (simplified): deduct interest + running costs + depreciation (principal not deductible)
    deductible = pm_cost + annual_insurance + annual_water + annual_council + annual_misc + annual_interest_paid + annual_depreciation
    taxable_income = gross_income - deductible
    tax_effect = -taxable_income * tax_rate  # negative taxable income => positive benefit
    dep_tax_shield = annual_depreciation * tax_rate

    after_tax_cashflow = (gross_income - (pm_cost + other_costs + annual_interest_paid + annual_principal_paid)) + tax_effect

    rows.append({
        "Year": year,
        "Property Value": round(value, 2),
        "Gross Rent": round(gross_income, 2),
        "PM Fees": round(pm_cost, 2),
        "Interest": round(annual_interest_paid, 2),
        "Principal": round(annual_principal_paid, 2),
        "Debt Service": round(debt_service, 2),
        "Insurance": round(annual_insurance, 2),
        "Water": round(annual_water, 2),
        "Council": round(annual_council, 2),
        "Misc": round(annual_misc, 2),
        "Depreciation": round(annual_depreciation, 2),
        "Other Costs": round(other_costs, 2),
        "Total Costs": round(total_costs, 2),
        "Taxable Income": round(taxable_income, 2),
        "Tax Rate": round(tax_rate * 100, 2),
        "Tax Effect": round(tax_effect, 2),
        "After-Tax Cashflow": round(after_tax_cashflow, 2),
        "Depreciation Shield": round(dep_tax_shield, 2),
        "Loan Balance": round(max(balance, 0.0), 2)
    })

    # Step forward one year (skip on final row)
    if year < term_years:
        value *= (1 + capital_growth)
        annual_rent *= (1 + rent_growth)
        annual_insurance *= (1 + cost_growth)
        annual_water *= (1 + cost_growth)
        annual_council *= (1 + cost_growth)
        annual_misc *= (1 + cost_growth)

df = pd.DataFrame(rows)

# Property value growth % from Year 1 (if Year 1 exists, else Year 0)
if (df['Year'] == 1).any():
    base_val = float(df.loc[df['Year'] == 1, 'Property Value'].iloc[0])
else:
    base_val = float(df.loc[df['Year'] == 0, 'Property Value'].iloc[0])
df['PV Growth % from Year1'] = (df['Property Value'] / base_val - 1.0) * 100.0

# ---- Table ----
st.subheader("Summary table")
st.dataframe(df, use_container_width=True)

# ---- Income vs Costs (toggle + points + tooltip) ----
st.subheader("Income vs Costs (Break-even)")
chart_style = st.radio("Chart style", ["Line", "Area"], index=0, horizontal=True)

base = (
    alt.Chart(df)
    .transform_fold(
        fold=["Gross Rent", "Total Costs"],
        as_=["Series", "Amount"]
    )
    .encode(
        x=alt.X('Year:Q', axis=alt.Axis(title='Year')),
        y=alt.Y('Amount:Q', axis=alt.Axis(title='Annual $')),
        color=alt.Color('Series:N'),
        tooltip=[
            alt.Tooltip('Year:Q', title='Year'),
            alt.Tooltip('Gross Rent:Q', title='Gross Income', format=',.0f'),
            alt.Tooltip('Total Costs:Q', title='Expenses', format=',.0f'),
            alt.Tooltip('PV Growth % from Year1:Q', title='Value ↑ from Yr1 (%)', format='.2f')
        ]
    )
)

if chart_style == "Area":
    area = base.mark_area(opacity=0.25)
    line = base.mark_line()
    points = base.mark_point()
    ic_chart = (area + line + points).interactive()
else:
    ic_chart = base.mark_line(point=True).interactive()

st.altair_chart(ic_chart, use_container_width=True)

# Break-even note
breakeven_years = df[df["Gross Rent"] >= df["Total Costs"]]["Year"].tolist()
if breakeven_years:
    be_year = breakeven_years[0]
    st.caption(f"Break-even reached in year {be_year}. After that year, gross rent exceeds total costs (including debt service and other costs).")
else:
    st.caption("No break-even within the projection window based on current inputs.")

# ---- Property value chart (line + points + tooltip) ----
st.subheader("Property Value (Compounded)")
val_chart = (
    alt.Chart(df)
    .mark_line(point=True)
    .encode(
        x=alt.X('Year:Q', axis=alt.Axis(title='Year')),
        y=alt.Y('Property Value:Q', axis=alt.Axis(title='Property Value ($)')),
        tooltip=[
            alt.Tooltip('Year:Q', title='Year'),
            alt.Tooltip('Property Value:Q', title='Property Value', format=',.0f'),
            alt.Tooltip('PV Growth % from Year1:Q', title='Value ↑ from Yr1 (%)', format='.2f')
        ]
    )
    .interactive()
)
st.altair_chart(val_chart, use_container_width=True)

# ---- After-Tax Cashflow (simple line) ----
st.subheader("After-Tax Cashflow")
atcf_chart = (
    alt.Chart(df)
    .mark_line(point=True)
    .encode(
        x=alt.X('Year:Q', axis=alt.Axis(title='Year')),
        y=alt.Y('After-Tax Cashflow:Q', axis=alt.Axis(title='After-Tax Cashflow ($)')),
        tooltip=[
            alt.Tooltip('Year:Q', title='Year'),
            alt.Tooltip('After-Tax Cashflow:Q', title='After-Tax Cashflow', format=',.0f')
        ]
    )
    .interactive()
)
st.altair_chart(atcf_chart, use_container_width=True)

st.markdown(
    """
**Assumptions**
- Debt service: monthly compounding. P&I uses a fixed monthly repayment (standard amortization). IO pays monthly interest only.
- Costs inflate by the chosen rate. Rent grows by the chosen rate.
- Tax (simplified AU): deductible = interest + PM + council/insurance/water/misc + depreciation. Principal not deductible.
- Depreciation kept simple: fixed annual amount, or build value × flat rate (e.g., 2.5%). No asset pools or balancing adjustments.

**Notes**
- "Total Costs" include PM fees, running costs, and **debt service (interest + principal)**.
- Tooltips on the chart show: Gross Income, Expenses, and Property value ↑% from Year 1.
"""
)